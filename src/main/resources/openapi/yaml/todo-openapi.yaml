openapi: 3.0.1
info:
  title: Todo Service API
  description: This is an api-spec for `todo` service.
  termsOfService: http://swagger.io/terms/
  contact:
    name: Mothusi Molorane
    email: molorane.mothusi@gmail.com
  license:
    name: Apache 2.0
    url: http://springdoc.org
  version: 0.0.1
servers:
  - url: http://localhost:2023/todo
    description: Generated server url
tags:
  - name: Todo
    description: Api operations for the todo
paths:
  /v1/task/{userId}:
    get:
      tags:
        - Todo
      summary: Find todos by accountId
      description: Find todos by accountId
      operationId: findAllByAccountId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
    put:
      tags:
        - Todo
      summary: Update Todo
      description: Update a Todo
      operationId: updateTodo
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodoDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
    post:
      tags:
        - Todo
      summary: Add a todo
      description: Add a todo
      operationId: addTodo
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoDTO'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TodoDTO'
        '204':
          description: No Content
        '400':
          description: Invalid ID supplied
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodoDTO'
        '404':
          description: Todo not found
          content:
            '*/*':
              schema:
                type: string
        '405':
          description: Validation exception
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodoDTO'
  /v1/task/undo/{id}:
    put:
      tags:
        - Todo
      summary: Restore a deleted Todo
      description: Restore a deleted Todo
      operationId: restoreDeleted
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
  /v1/task:
    get:
      tags:
        - Todo
      summary: Get Todos in pages
      description: Get Todos
      operationId: findTodos
      parameters:
        - name: pageNo
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: pageSize
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: sortBy
          in: query
          required: false
          schema:
            type: string
            default: name
        - name: dir
          in: query
          required: false
          schema:
            type: string
            default: asc
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/PageTodoDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
  /v1/task/{todoId}:
    get:
      tags:
        - Todo
      summary: Get Todo By Id
      description: Get Todo
      operationId: findTodoById
      parameters:
        - name: todoId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Get Todo By Id
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/TodoDTO'
        '204':
          description: No Content
        '404':
          description: Todo not found
          content:
            '*/*':
              schema:
                type: string
  /v1/task/{title}/title:
    get:
      tags:
        - Todo
      summary: Get a Todo By title
      description: Get a Todo
      operationId: findByTitleContaining
      parameters:
        - name: title
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TodoDTO'
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
  /v1/task/{id}:
    delete:
      tags:
        - Todo
      summary: Delete a Todo By Id
      description: Delete a Todo
      operationId: deleteTodoById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                type: object
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            '*/*':
              schema:
                type: string
components:
  schemas:
    TodoDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
        todoType:
          type: string
          enum:
            - PRAYER
            - GYM
            - EVANGELISM
            - FLUTTER
            - SPRING
            - STUDY
            - FOOD
            - ENTERTAINMENT
        title:
          type: string
        completed:
          type: boolean
        dueDate:
          type: string
          format: date
        description:
          type: string
        createdDate:
          type: string
          format: date-time
        deleted:
          type: boolean
    PageTodoDTO:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: '#/components/schemas/TodoDTO'
        number:
          type: integer
          format: int32
        sort:
          $ref: '#/components/schemas/SortObject'
        pageable:
          $ref: '#/components/schemas/PageableObject'
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: '#/components/schemas/SortObject'
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        paged:
          type: boolean
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
